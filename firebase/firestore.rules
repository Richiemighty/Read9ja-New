rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isBuyer() {
      return isAuthenticated() && getUserRole() == 'buyer';
    }
    
    function isSeller() {
      return isAuthenticated() && getUserRole() == 'seller';
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    function isBuyerOrSeller() {
      return isAuthenticated() && (getUserRole() == 'buyer' || getUserRole() == 'seller');
    }

    // Users collection - stores user roles and basic info
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) && 
                      request.auth.uid == resource.id &&
                      request.resource.data.keys().hasAll(['id', 'email', 'role']) &&
                      request.resource.data.role in ['buyer', 'seller'];
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Profiles collection - detailed user information
    match /profiles/{profileId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(profileId) && 
                      request.auth.uid == resource.id;
      allow update: if isOwner(profileId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Products collection
    match /products/{productId} {
      allow read: if true; // Public read for marketplace browsing
      allow create: if isSeller() && 
                      request.resource.data.sellerId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['name', 'description', 'category', 'price', 'sellerId', 'isAvailable']);
      allow update: if (isSeller() && resource.data.sellerId == request.auth.uid) || 
                      isAdmin();
      allow delete: if (isSeller() && resource.data.sellerId == request.auth.uid) || 
                      isAdmin();
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if (resource.data.buyerId == request.auth.uid) ||
                    (resource.data.sellerId == request.auth.uid) ||
                    isAdmin();
      allow create: if isAuthenticated() && 
                      request.resource.data.buyerId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['buyerId', 'sellerId', 'productId', 'status', 'totalAmount']);
      allow update: if (resource.data.sellerId == request.auth.uid && 
                       request.resource.data.status in ['payment_verified', 'rider_assigned', 'picked_up', 'in_transit', 'delivered']) ||
                      isAdmin();
      allow delete: if isAdmin();
    }

    // Order tracking collection
    match /orderTracking/{trackingId} {
      allow read: if exists(/databases/$(database)/documents/orders/$(resource.data.orderId)) &&
                    (get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.buyerId == request.auth.uid ||
                     get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.sellerId == request.auth.uid ||
                     isAdmin());
      allow create: if isAuthenticated() && 
                      exists(/databases/$(database)/documents/orders/$(request.resource.data.orderId));
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if resource.data.buyerId == request.auth.uid ||
                    resource.data.sellerId == request.auth.uid ||
                    isAdmin();
      allow create: if isAuthenticated() && 
                      (request.resource.data.buyerId == request.auth.uid ||
                       request.resource.data.sellerId == request.auth.uid) &&
                      request.resource.data.keys().hasAll(['productId', 'buyerId', 'sellerId']);
      allow update: if resource.data.buyerId == request.auth.uid ||
                      resource.data.sellerId == request.auth.uid ||
                      isAdmin();
      allow delete: if isAdmin();
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if exists(/databases/$(database)/documents/conversations/$(resource.data.conversationId)) &&
                    (get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.buyerId == request.auth.uid ||
                     get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.sellerId == request.auth.uid ||
                     isAdmin());
      allow create: if isAuthenticated() && 
                      request.resource.data.senderId == request.auth.uid &&
                      exists(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)) &&
                      (get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.buyerId == request.auth.uid ||
                       get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.sellerId == request.auth.uid);
      allow update: if resource.data.senderId == request.auth.uid || isAdmin();
      allow delete: if resource.data.senderId == request.auth.uid || isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public read for product reviews
      allow create: if isAuthenticated() && 
                      request.resource.data.buyerId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['orderId', 'productId', 'sellerId', 'buyerId', 'rating', 'comment', 'type']);
      allow update: if resource.data.buyerId == request.auth.uid || isAdmin();
      allow delete: if resource.data.buyerId == request.auth.uid || isAdmin();
    }

    // Favorites collection
    match /favorites/{favoriteId} {
      allow read: if resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'productId']);
      allow update: if resource.data.userId == request.auth.uid;
      allow delete: if resource.data.userId == request.auth.uid;
    }

    // Riders collection
    match /riders/{riderId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update: if isOwner(riderId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Referrals collection
    match /referrals/{referralId} {
      allow read: if resource.data.referrerId == request.auth.uid ||
                    resource.data.referredUserId == request.auth.uid ||
                    isAdmin();
      allow create: if isAuthenticated() && 
                      (request.resource.data.referrerId == request.auth.uid ||
                       request.resource.data.referredUserId == request.auth.uid) &&
                      request.resource.data.keys().hasAll(['referrerId', 'referredUserId', 'bonusAmount', 'status']);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'title', 'message', 'type', 'isRead']);
      allow update: if resource.data.userId == request.auth.uid;
      allow delete: if resource.data.userId == request.auth.uid || isAdmin();
    }

    // Admin-only collections (analytics, system settings, etc.)
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    match /system/{document=**} {
      allow read, write: if isAdmin();
    }

    // Catch-all rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Storage rules
service firebase.storage {
  match /b/{bucket}/o {
    
    // User avatars
    match /avatars/{userId}/{allPaths=**} {
      allow read: if true; // Public read for avatars
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Product images
    match /products/{sellerId}/{allPaths=**} {
      allow read: if true; // Public read for product images
      allow write: if request.auth != null && request.auth.uid == sellerId;
    }

    // Chat images and files
    match /chat-images/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /chat-files/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Admin uploads
    match /admin/{allPaths=**} {
      allow read: if true; // Public read for admin uploads (banners, etc.)
      allow write: if request.auth != null && 
                     exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
                     get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Deny everything else
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
